

#pip install crowd-kit
import pandas as pd
from crowdkit.aggregation import MajorityVote, OneCoinDawidSkene, MMSR, Wawa, ZeroBasedSkill, GLAD, MACE, DawidSkene

class EnsembleAggregator:
    def __init__(self, dataframe, columns_to_transform):
        """
        Initialize the EnsembleAggregator with a DataFrame and columns to transform.

        :param dataframe: pd.DataFrame containing the data.
        :param columns_to_transform: List of columns to melt for transformation.
        """
        self.dataframe = dataframe
        self.columns_to_transform = columns_to_transform
        self.ensemble_methods = {
            'MajorityVote': MajorityVote(),
            'OneCoinDawidSkene': OneCoinDawidSkene(n_iter=100),
            'MMSR': MMSR(),
            'Wawa': Wawa(),
            'ZeroBasedSkill': ZeroBasedSkill(),
            'GLAD': GLAD(),
            'MACE': MACE(),
            'DawidSkene': DawidSkene(n_iter=100)
        }
        self.df_final = None

    def transform_data(self):
        """
        Transform the DataFrame by melting specified columns and adding task identifiers.
        """
        df_melted = self.dataframe.melt(id_vars=['id'], value_vars=self.columns_to_transform, var_name='worker', value_name='label')
        df_melted['task'] = df_melted.groupby('worker').cumcount() + 1
        df_melted['task'] = df_melted['task'].apply(lambda x: f't00{x:02d}')
        self.df_final = df_melted[['worker', 'task', 'label']]

    def apply_ensemble_method(self, method_name):
        """
        Apply a specified ensemble method to the transformed DataFrame.

        :param method_name: Name of the ensemble method to apply.
        """
        if method_name not in self.ensemble_methods:
            raise ValueError(f"Method {method_name} is not supported.")
        method = self.ensemble_methods[method_name]
        aggregated_labels = method.fit_predict(self.df_final)
        self.dataframe[f'{method_name.lower()}'] = aggregated_labels.tolist()

    def apply_all_methods(self):
        """
        Apply all ensemble methods to the transformed DataFrame.
        """
        for method_name in self.ensemble_methods:
            self.apply_ensemble_method(method_name)

    def get_dataframe(self):
        """
        Get the resulting DataFrame after applying ensemble methods.

        :return: pd.DataFrame containing the original data with additional ensemble method columns.
        """
        return self.dataframe

# Usage example:
if __name__ == "__main__":
    # Load the data
    df = pd.read_csv('/your_path/dataset containing model prediction.csv')

    # Columns to transform
    # Specify columns of labels generated by different models
    columns_to_transform = ['llama2_70b', 'mistra_45b_dpo', 'llama3_8b', 'mistra_45b']

    # Create an instance of the EnsembleAggregator class
    aggregator = EnsembleAggregator(df, columns_to_transform)

    # Transform the data
    aggregator.transform_data()

    # Apply all ensemble methods and aggregate the results
    aggregator.apply_all_methods()

    # Get the resulting DataFrame
    result_df = aggregator.get_dataframe()

    # Display the resulting DataFrame
    print(result_df.head())

    # Save the results to an Excel file
    result_df.to_excel('aggregate_ensemble.xlsx')
